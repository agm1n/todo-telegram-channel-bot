const TelegramBot = require('node-telegram-bot-api');

// replace the value below with the Telegram token you receive from @BotFather
const token = "YOUR_API_KEY";
const helpText = `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ #todo –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∏ —ç—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É–¥—É—à–∫–∏`;

// Create a bot that uses 'polling' to fetch new updates
const bot = new TelegramBot(token, {
  polling: {
    interval: 1000,
    autoStart: true
  }
});

bot.on('channel_post', async msg => {
  console.log(msg);
});

bot.onText(/\/help/, (msg, match) => {
  const {message_id: originalMessageId, from: {username}, chat: {id: chatId}} = msg;
  bot.sendMessage(chatId, helpText, {
    reply_to_message_id: originalMessageId
  });
});

bot.on('message', async msg => {
  const {message_id: originalMessageId, from: {username}, chat: {id: chatId}} = msg;
  switch (msg.text) {
    case '/start':
      bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${username}! –Ø #todo –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞`, {
        reply_to_message_id: originalMessageId
      });
      break;

    default:
      break;
  }
});

bot.on('channel_post', async (msg) => {
  const {text, message_id, chat: {id: chatId, type: chatType}} = msg;
  if (chatType === 'channel' && text) {
    const todoRegex = /^#todo /;
    const helpRegex = /\/help /;
    if (todoRegex.test(msg.text)) {
      console.log('ppp');
      try {
        opts = {
          reply_markup: {
            inline_keyboard: [
              [
                {text: '‚úîÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'done'},
                {text: 'üëÄ –°–º–æ—Ç—Ä–µ—Ç—å', callback_data: 'infocus'}
              ]
            ]
          }
        };
        await bot.editMessageReplyMarkup(opts.reply_markup, {chat_id: chatId, message_id: message_id});
      } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      }
    } else if (text === '/help') {
      bot.sendMessage(chatId, helpText, {
        reply_to_message_id: message_id
      });
    }
  }
});

bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  let text = msg.text || '';
  const data = callbackQuery.data;
  let opts;
  switch (data) {
    case 'done':
      text = `‚úÖ ${text.replace('~~', '').replace('#todo ', '').replace('üëÄ', '')}`;
      opts = {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: [
            [{text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: 'undone'}]
          ]
        }
      };
      await bot.editMessageText(text, opts);
      break;
    case 'undone':
      text = text.startsWith('‚úÖ ') ? '#todo ' + text.slice(2) : text;
      opts = {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: [
            [
              {text: '‚úîÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'done'},
              {text: 'üëÄ –°–º–æ—Ç—Ä–µ—Ç—å', callback_data: 'infocus'}
            ]
          ]
        }
      };
      await bot.editMessageText(text, opts);
      break;
    case 'unfocus':
      text = text.startsWith('üëÄ ') ? text.slice(2) : text;
      opts = {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: [
            [
              {text: '‚úîÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'done'},
              {text: 'üëÄ –°–º–æ—Ç—Ä–µ—Ç—å', callback_data: 'infocus'}
            ]
          ]
        }
      };
      await bot.editMessageText(text, opts);
      break;
    case 'infocus':
      text = `üëÄ ${text.replace('~~', '')}`;
      opts = {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: [
            [

              {text: '‚úîÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'done'},
              {text: '–£–±—Ä–∞—Ç—å –∏–∑ —Ñ–æ–∫—É—Å–∞', callback_data: 'unfocus'}
            ]
          ]
        }
      };
      await bot.editMessageText(text, opts);
      break;
    default:
      break;
  }
  bot.on("polling_error", err => console.log(err.data.error.message));
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.');
